<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Dynamic" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".js" #>

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var FinancialApp;
(function(FinancialApp) {

    var controllerInitializer = {
<#
    string basePath = this.Host.ResolvePath("");
    IEnumerable<string> files = Directory.EnumerateFiles(basePath, "*.ts");

    IEnumerable<dynamic> controllers = GetFiles(files);
#>

        registerControllers: function($app) {
    <#    foreach (dynamic d in controllers) {#>
                $app.controller('<#=d.controllerName#>', FinancialApp.<#=d.controllerName#>);
    <#    } #>
        },

        registerControllerRoutes: function($routeProvider) {
    <#    foreach (dynamic d in controllers) {#>
            $routeProvider.when('<#=d.route#>', 
                {
                    controller: '<#=d.controllerName#>',
                    templateUrl: '/Angular/<#=d.viewName#>.html'
                });
    <#    } #>
        },
    };

    FinancialApp.ControllerInitializer = controllerInitializer;

})(FinancialApp || (FinancialApp = {}));


<#+ 
    static IEnumerable<dynamic> GetFiles(IEnumerable<string> rawPaths) {

        foreach (string filePath in rawPaths) {
            string fileName = Path.GetFileNameWithoutExtension(filePath); 

            const string suffix= "Controller";
            if (!fileName.EndsWith(suffix)) {
                continue;
            }

            dynamic opts = TryReadFileOptions(filePath);

            opts.controllerName = opts.controllerName ?? fileName;
            opts.viewName = opts.viewName ?? opts.controllerName.Remove(opts.controllerName.Length - suffix.Length, suffix.Length);
            opts.route =  opts.route ?? "/" + opts.viewName.ToLower();

            yield return opts;
        }
    }

    static dynamic TryReadFileOptions(string rawPath) {
        XElement configElement= TryReadFileOptionsElement(rawPath);

        if (configElement != null) {
            return XAttributesToDynamic(configElement.Attributes());
        }

        return CreateEmpty();
    }

    static ExpandoObject CreateEmpty() {
        ExpandoObject o = new ExpandoObject();

        dynamic d = o;
        d.controllerName = d.viewName = d.route = null;

        return o;
    }

    static dynamic XAttributesToDynamic(IEnumerable<XAttribute> attributes) {
        IDictionary<string, Object> result = CreateEmpty();

        foreach (XAttribute attr in attributes) {
            result[attr.Name.LocalName] = attr.Value;
        }

        return result;
    }

    static XElement TryReadFileOptionsElement(string rawPath) {
        foreach (string line in File.ReadLines(rawPath)) {
            if (!line.StartsWith("///")) {
                continue;
            }

            string cleanLine = line.Substring(3);
            if (line.Contains("init-options")) {
                try {
                    return XDocument.Parse(cleanLine).Root;
                } catch (System.Xml.XmlException ex) {
                    throw new InvalidOperationException(
                        String.Format("Invalid XML for file '{0}': {1}", rawPath, cleanLine), ex);
                }
            }
        }

        return null;
    }
    #>